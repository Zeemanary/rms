q()
n
q()
w
as.matrix(w)
x <- rbind(c(1,0,3),c(0,2,0),c(3,0,4))/10
x
y <- as.matrix.ssr(x)
y
as.matrix(y)
w <- new('matrix.ssr', ra=(1:4)/10, ja=as.integer(c(1,2,1,3)),
         ia=as.integer(c(1,2,3,5)), dimension=c(3L,3L))
all.equal(w,y)


?chol
solve(w)
as.matrix.csr(w)
library(help='SparseM')
?SparseM.solve
w
library(help='SparseM')
g
as.matrix(y)
y
x
args(vcov)
args(vcov.rms)
rms:::vcov.rms
coef(g)
coef(g)
w
?chol
class(d)
names(d)
unclass(d)
d %*% t(d)
t(d) %*% d
chol(rbind(13.3,-11.6))
chol(v)
v
solve(chol(v))
w
v
solve(v)
h
v
h
v
v
q()
q()
lp <- 1:3
values <- c(.1, .2, .4, .7)
intercepts <- c(2, 3.5, 4.5)
ns <- 4
xb <- sapply(c(1e30, intercepts), '+', lp)
xb
cumprob <- plogis
class(xb)
cumprob(xb)
intercepts <- c(2, 1.5, .7)
xb <- sapply(c(1e30, intercepts), '+', lp)
xb
cumprob(xb)
lp <- 1:6
xb <- sapply(c(1e30, intercepts), '+', lp)
cumprob(xb)
values
xb
xb
?approx
values
approx(values, xb[1,], xout=.21, f=1)
approx(values, xb[1,], xout=.21, f=1)$y
xb
approx(values, xb[1,], xout=.21, f=1, method='constant')$y
approx(values, xb[1,], xout=.39, f=1, method='constant')$y
approx(values, xb[1,], xout=.7, f=1, method='constant')$y
approx(values, xb[1,], xout=.71, f=1, method='constant')$y
y <- c(0, .21, .42, .8)
prob
p
p
t(p)
p
y
prob
values
p
p
y
y=.21
p
lp
lp <- 3
y
prob
lp
prob
y
lp
values
lp
y
prob
prob
ko
lp
y
prob
prob
prob
p
p[drop=TRUE]
p[,,drop=TRUE]
drop(p)
drop(matrix(1:4, nrow=2))
approx(values, xb[1,], xout=.21, f=1)
w <- ecdf(runif(10))
class(w)
plot.ecdf
plot(1:5, ylab=expression(Prob(Y \geq y)))
plot(1:5, ylab=expression(Prob(Y >= y)))
?plot.stepfun
unclass(w)
class(w)
unclass(w)
ecdf
approxfun
w
plot(w)
?plot.stepfun
stepfun
w <- stepfun(c(1,3,4), c(.9,.8,.7))
w <- stepfun(c(1,3,4), c(.9,.8,.7,0))
w
plot(w)
plot(w, verticals=TRUE, pch=19)
z <- ecdf(runif(8))
plot.stepfun(z)
plot.stepfun(z, verticals=TRUE, pch=19)
ecdf
w <- approxfun(c(1,3,4), c(.9,.8,.7), yleft=1, yright=0, f=1, ties='ordered')
plot(w)
plot.stepfun(w, verticals=TRUE, pch=19)
plot.ecdf
w <- approxfun(c(1,3,4), c(.9,.8,.7), yleft=1, yright=0, f=1, ties='ordered')
w
plot(w)
dev.off()
plot(w)
?plot.stepfun
plot.ecdf
xx <- c(1,3,4); yy <- c(.9,.8,.7)
s <- stepfun(xx, yy, right=TRUE)
s <- stepfun(xx, c(1,yy), right=TRUE)
s
unclass(s)
s <- stepfun(xx, c(1,yy), right=TRUE)
plot(s)
plot(xx,yy, type='s')
xx
yy
?plot
xx <- c(1,3,4,5)
yy <- c(1,.8,.7,.5)
plot(xx,yy,type='s')
plot(xx,yy,type='S')
xx <- c(1,3,4,5)
yy <- c(1,.8,.7,.5)
plot(xx,yy,type='S', ylim=c(0,1))
args(segments)
rep(c(3,2,1),2)
rep(c(3,2,1),each=2)
x=1 1 y 1 .8   x=3 3 y .8 .7  x=4 4 y .7 .5 x=5 5 y .5 0
lag(1:3)
lines(rep(xx, each=2), c(rep(yy, each=2)[-1], 0), col='gray70')
rep(xx, each=2)
rep(yy, each=2)[-1]
c(rep(yy, each=2)[-1],0)
plot(1:5, 0, type='n', ylim=c(0,1))
plot(1:5, rep(0,5), type='n', ylim=c(0,1))
lines(rep(xx, each=2), c(rep(yy, each=2)[-1], 0), col='gray70')
rep(xx, each=2); c(rep(yy, each=2)[-1], 0)
segments(xx, yy, xx, c(yy[-1],0))
segments(xx, yy, xx, c(yy[-1],0), col='red')
segments(xx[-length(xx)], xx[-1], yy, yy, col='blue')
xx
xx[-length(xx)]; xx[-1]
yy
segments(xx[-length(xx)], yy, xx[-1], yy, col='blue')
xx[-length(xx)]; yy
want  1 .8 3 .8   3 .7 4 .7  4 .5 5 .5
xx[-length(xx)]
xx[-1]
?segments
yy
plot(1:5, rep(0,5), type='n', ylim=c(0,1))
col.vert='gray70'
points(xx,yy,pch=19)
plot.ExProbs(list(xx,yy))
dev.off()
plot.ExProbs(list(xx,yy))
plot.ExProbs(list(xx,yy))
plot(1:4)
plot.ExProbs(list(xx,yy))
plot.ExProbs(list(xx,yy))
xx
yy
plot.ExProbs(list(xx,yy))
require(Hmisc)
plot.ExProbs(list(xx,yy))
plot.ExProbs(list(yy,xx))
plot.ExProbs(list(yy,xx))
plot.ExProbs(list(yy,xx))
require(rms)
source('~/R/rms/R/orm.s')
x1 <- runif(20)
y <- x1 + runif(20)
f <- orm(y ~ x1)
source('/tmp/rms.s')
f <- orm(y ~ x1)
d <- Distfun(f)
d
lp <- predict(f, newdata(x1=.5))
lp <- predict(f, newdata=data.frame(x1=.5))
lp
d <- Distfun(f)
d(lp)
w=d(lp)
length(w[[1]])
length(w[[2]])
plot(w)
names(w)
w$y
f$yunique
w$prob
plot(w[[2]],w[[1]])
w
plot(w[[1]],w[[2]])
plot(w)
w[[1]]
plot(w)
par('col')
w=d(lp, y=.5)
w
w=d(lp, y=1)
w
abline(v=1)
abline(h=.6616767)
w=d(c(lp,lp+1), y=1)
w
w=d(c(lp,lp+1))
w
w[[1]]
w[[2]]
NROW(1:3)
w=d(c(lp,lp+1))
plot(w)
plot(w)
plot.ExProb
source('~/R/rms/R/orm.s')
source('~/R/rms/R/orm.s')
plot(w)
source('~/R/rms/R/orm.s')
plot.ExProb
find('plot.ExProb')
w
plot(w)
w[[2]]
plot.ExProb
class(w)
class(w)='ExProb'
plot(w)
names(f)
f$terms
all.var(f$terms)
var.inner
all.vars(f$terms)
source('~/R/rms/R/orm.s')
d <- ExProb(f)
class(d)
d
d(lp)
w=d(c(lp,lp+1))
w
plot(w)
source('~/R/rms/R/orm.s')
plot(w)
source('~/R/rms/R/orm.s')
plot(w)
args(prompt)
prompt(ExProb.orm, file='/tmp/z')
set.seed(1)
x1 <- runif(20)
yvar <- x1 + runif(20)
f <- orm(yvar ~ x1)
d <- ExProb(f)
lp <- predict(f, newdata=data.frame(x1=c(.2,.8)))

lp
w <- d(lp)
plot(w)

qu <- Quantile(f)
abline(h=.5, col='gray80')
abline(v=qu(.5, lp), col='gray80')

plot(w)
qu <- Quantile(f)
abline(h=c(.1,.5), col='gray80')
abline(v=qu(.5, lp), col='gray80')
abline(v=qu(.1, lp), col='green')

plot(w)
qu <- Quantile(f)
abline(h=c(.9,.5), col='gray80')
abline(v=qu(.5, lp), col='gray80')
abline(v=qu(.9, lp), col='green')

plot(w)
qu <- Quantile(f)
abline(h=c(.1,.5), col='gray80')
abline(v=qu(.5, lp), col='gray80')
abline(v=qu(.9, lp), col='green')

q()
require(rms)
source('/tmp/rms.s')
x1 <- sample(0:1, 40, TRUE)
yvar <- runif(40)
f <- orm(yvar ~ x1)
?orm
?ExProb
d <- ExProb(f)
lp <- predict(f, newdata=data.frame(x1=c(0,1)))
d
w <- d(lp)
w
plot(w)
plot(w, data=data.frame(x1, yvar))
yvar[x1==1] <- 3+yvar[x1==1]
f <- orm(yvar ~ x1)
lp <- predict(f, newdata=data.frame(x1=c(0,1)))
d <- ExProb(f)
w <- d(lp)
plot(w, data=data.frame(x1, yvar))
w
data.frame(x1, yvar)
plot(x1, yvar)
length(yvar)
yvar <- runif(40)
yvar[x1==1] <- yvar[x1==1] + 1
f <- orm(yvar ~ x1)
d <- ExProb(f)
lp <- predict(f, newdata=data.frame(x1=c(0,1)))
w <- d(lp)
plot(w, data=data.frame(x1, yvar))
plot(x1, yvar)
yvar[x1==1] <- yvar[x1==1] + -.6
f <- orm(yvar ~ x1)
lp <- predict(f, newdata=data.frame(x1=c(0,1)))
d <- ExProb(f)
w <- d(lp)
plot(w, data=data.frame(x1, yvar))
source('/tmp/rms.s')
plot(w, data=data.frame(x1, yvar))
source('/tmp/rms.s')
plot(w, data=data.frame(x1, yvar))
source('/tmp/rms.s')
plot(w, data=data.frame(x1, yvar))
min(yvar[x1==1])
q()
